********************Guide to set-up a multi-node kuberenets cluster using kubeadm in VirtualBox (Master and 2 Workers)********************

*Preferred OS: Ubuntu 22.04.1 LTS

*****Preliminary setup:*****

--Go to file in VirtualBox and configure the NAT Network:
           --Network Settings
                    -setup the network name: linux-cluster
                    -change the network cidr: 192.168.10.0/24

--Create 3 Vitual Machines:
           Master           [4GB-4CPUs, 60GB]
           Worker1          [2GB-2CPUs, 40GB]
           Worker2          [2GB-2CPUs, 40GB]

--Select a VM and click on settings:
           --Go to the network
                     -setup Adapter1: NAT Network  (This will take the NAT network created previously)
                     -setup Adapter2: Bridged Adapter

*Run the Virtual Machines
-----------------------------------------------------------------------------------------------------------------------------------------------------

1. Change the IP of all the nodes to static IP:

--Check the ip address of the nodes: ifconfig (dynamically created)
            --sudo apt-get install net-tools (*required)
            --change the IP address of VMs to static IP
               For example:
                               Master  = 192.168.10.20
                               Worker1 = 192.168.10.21
                               Worker2 = 192.168.10.22
               -sudo nano /etc/netplan/50-cloud-init.yaml
                      A text editor open up and add the following content

                           network:
                                  ethernets:
                                         enp0s3:
                                                dhcp4: no
                                                addresses: [192.168.10.20/24]
                                         enp0s8:
                                                dhcp4: true
                                  version: 2
                      *Save and exit the nano editor
               -sudo netplan apply                       *(do this for all VMs)

--Check the new IP address for all the nodes (ifconfig):
               -ping www.google.com (check internet connectivity on the VM)
               -sudo apt-get update (updates repository)

--Install openssh and adding hosts for all nodes:
               -sudo apt-get install openssh-client
               -sudo apt-get install openssh-server
               -ssh-keygen -t rsa -b 4096      (generates ssh keys)

               -sudo /etc/hosts
                     Add below entries
                             192.168.10.20  master
                             192.168.10.21  worker1
                             192.168.10.22  worker2

               -verify the connectivity    (Packets should be received with 0% data loss)
                    *ping -c 5 master
                    *ping -c 4 worker1
-----------------------------------------------------------------------------------------------------------------------------------------------------

2. Disable Swap memory and uintended firewall:

--Do this on all nodes:
               --Disable firewall
                        -ufw disable

               --Swapoff images
                        -swapoff -a
                        -nano /etc/fstab    (opens an editor)
                              comment the line starting with /swap with a # and save and exit
                                                        or
                              -sed -i '/swap/d' /etc/fstab

--Update sysctl settings for kubernetes networking:
               -cat >>/etc/sysctl.d/kubernetes.conf<<EOF
                net.bridge.bridge-nf-call-ip6tables = 1
                net.bridge.bridge-nf-call-iptables  = 1
                net.ipv4.ip_forward                 = 1
                EOF
               -sysctl --system              (settings take effect in the same session)
-----------------------------------------------------------------------------------------------------------------------------------------------------

3. Download Docker and configure the CNI for all nodes:

--Installing Docker:
               -sudo su -                    (login as super-user/root-user)
               -apt-get update
               -sudo apt-get install -y docker.io
               -cat <<EOF | sudo tee /etc/docker/daemon.json
{
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
      "max-size": "100m"
   },
       "storage-driver": "overlay2"
       }
EOF

               -sudo /etc/containerd/
               -touch config.toml
               -containerd config default > /etc/containerd/config.toml        (This sets the cni for every node and the node will be in ready state)
               -sudo nano /etc/containerd/config.toml                          (search and set **SystemdCgroup = true**)
-----------------------------------------------------------------------------------------------------------------------------------------------------

4. Download and configure the gpg keys and kubernetes repository:

--Configuring kubernetes repository and gpg keys:
               -sudo apt-get update
               -sudo apt-get install -y apt-transport-https ca-certificates curl gpg         (Install apt-transport and curl)

*****Download the public signing key for the Kubernetes package repositories*****
               -sudo mkdir -p -m 755 /etc/apt/keyrings
               -curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
               -echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

*****Install kubelet, kubeadm and kubectl*****
               -sudo apt-get update
               -sudo apt-get install -y kubelet kubeadm kubectl
               -sudo apt-mark hold kubelet kubeadm kubectl               (optional: holds the current verion for all these tools i.e v1.29)
----------------------------------------------------------------------------------------------------------------------------------------------------

5. Configure kubernetes cluster to address various issues:

*****Set environment for kubeadm as systemd*****

        --sudo nano /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf      (opens nano editor and add the below line after last Environment variable)
               -Environment="cgroup-driver=systemd/cgroup-driver=cgroupfs"

*****Execute this command on master-node*****

               -kubeadm config images pull                        (pulls images required for the k8s cluster)
               -kubeadm init --apiserver-advertise-address=192.168.10.20 --pod-network-cidr=192.168.0.0/16

--After the master is initialized execute the below commands as normal user to use kubectl cli tool:
               -mkdir -p $HOME/.kube
               -sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
               -sudo chown $(id -u):$(id -g) $HOME/.kube/config

--Installing the container network interface (CNI) Calico:                              **(very important else node will be in NotReady state)
               -kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/tigera-operator.yaml
               -kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/custom-resources.yaml 
               -kubectl get pods -n calico-system             (verify if pods are created)

--Kubeadm to join the custer:
               -kubeadm token create --print-join-command                   (use this command to join the worker node to the cluster)

--Test the cluster:
               -kubectl get nodes -o wide
               -kubectl get pods --all-namespaces

--Systemctl commands to troubleshoot k8s cluster:
               -systemctl daemon-reload                       (reloads the cluster configuration)
               -systemctl restart kubelet
               -systemctl restart docker
               -systemctl restart containerd
               -systemctl enable kubelet
               -systemctl status kubelet

------------------------------------------------------------------------------------------------------------------------------------------------------
